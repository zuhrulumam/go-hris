// Code generated by MockGen. DO NOT EDIT.
// Source: business/domain/attendance/attendance.go
//
// Generated by this command:
//
//	mockgen -source=business/domain/attendance/attendance.go -destination=mocks/mock_attendance.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/zuhrulumam/go-hris/business/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainItf is a mock of DomainItf interface.
type MockDomainItf struct {
	ctrl     *gomock.Controller
	recorder *MockDomainItfMockRecorder
	isgomock struct{}
}

// MockDomainItfMockRecorder is the mock recorder for MockDomainItf.
type MockDomainItfMockRecorder struct {
	mock *MockDomainItf
}

// NewMockDomainItf creates a new mock instance.
func NewMockDomainItf(ctrl *gomock.Controller) *MockDomainItf {
	mock := &MockDomainItf{ctrl: ctrl}
	mock.recorder = &MockDomainItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainItf) EXPECT() *MockDomainItfMockRecorder {
	return m.recorder
}

// GetAvailableAttendanceSpot mocks base method.
func (m *MockDomainItf) GetAvailableAttendanceSpot(ctx context.Context, data entity.GetAvailableAttendanceSpot) ([]entity.AttendanceSpot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableAttendanceSpot", ctx, data)
	ret0, _ := ret[0].([]entity.AttendanceSpot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableAttendanceSpot indicates an expected call of GetAvailableAttendanceSpot.
func (mr *MockDomainItfMockRecorder) GetAvailableAttendanceSpot(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableAttendanceSpot", reflect.TypeOf((*MockDomainItf)(nil).GetAvailableAttendanceSpot), ctx, data)
}

// GetVehicle mocks base method.
func (m *MockDomainItf) GetVehicle(ctx context.Context, data entity.SearchVehicle) (entity.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicle", ctx, data)
	ret0, _ := ret[0].(entity.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicle indicates an expected call of GetVehicle.
func (mr *MockDomainItfMockRecorder) GetVehicle(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicle", reflect.TypeOf((*MockDomainItf)(nil).GetVehicle), ctx, data)
}

// InsertVehicle mocks base method.
func (m *MockDomainItf) InsertVehicle(ctx context.Context, data entity.InsertVehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVehicle", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertVehicle indicates an expected call of InsertVehicle.
func (mr *MockDomainItfMockRecorder) InsertVehicle(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVehicle", reflect.TypeOf((*MockDomainItf)(nil).InsertVehicle), ctx, data)
}

// UpdateAttendanceSpot mocks base method.
func (m *MockDomainItf) UpdateAttendanceSpot(ctx context.Context, data entity.UpdateAttendanceSpot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttendanceSpot", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAttendanceSpot indicates an expected call of UpdateAttendanceSpot.
func (mr *MockDomainItfMockRecorder) UpdateAttendanceSpot(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttendanceSpot", reflect.TypeOf((*MockDomainItf)(nil).UpdateAttendanceSpot), ctx, data)
}

// UpdateVehicle mocks base method.
func (m *MockDomainItf) UpdateVehicle(ctx context.Context, data entity.UpdateVehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVehicle", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVehicle indicates an expected call of UpdateVehicle.
func (mr *MockDomainItfMockRecorder) UpdateVehicle(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVehicle", reflect.TypeOf((*MockDomainItf)(nil).UpdateVehicle), ctx, data)
}
