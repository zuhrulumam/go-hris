// Code generated by MockGen. DO NOT EDIT.
// Source: business/domain/attendance/attendance.go
//
// Generated by this command:
//
//	mockgen -source=business/domain/attendance/attendance.go -destination=mocks/domain/attendance/mock_attendance.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/zuhrulumam/go-hris/business/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainItf is a mock of DomainItf interface.
type MockDomainItf struct {
	ctrl     *gomock.Controller
	recorder *MockDomainItfMockRecorder
	isgomock struct{}
}

// MockDomainItfMockRecorder is the mock recorder for MockDomainItf.
type MockDomainItfMockRecorder struct {
	mock *MockDomainItf
}

// NewMockDomainItf creates a new mock instance.
func NewMockDomainItf(ctrl *gomock.Controller) *MockDomainItf {
	mock := &MockDomainItf{ctrl: ctrl}
	mock.recorder = &MockDomainItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainItf) EXPECT() *MockDomainItfMockRecorder {
	return m.recorder
}

// CreateAttendance mocks base method.
func (m *MockDomainItf) CreateAttendance(ctx context.Context, data entity.CreateAttendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendance", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttendance indicates an expected call of CreateAttendance.
func (mr *MockDomainItfMockRecorder) CreateAttendance(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendance", reflect.TypeOf((*MockDomainItf)(nil).CreateAttendance), ctx, data)
}

// CreateAttendancePeriod mocks base method.
func (m *MockDomainItf) CreateAttendancePeriod(ctx context.Context, data entity.AttendancePeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendancePeriod", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttendancePeriod indicates an expected call of CreateAttendancePeriod.
func (mr *MockDomainItfMockRecorder) CreateAttendancePeriod(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendancePeriod", reflect.TypeOf((*MockDomainItf)(nil).CreateAttendancePeriod), ctx, data)
}

// CreateOvertime mocks base method.
func (m *MockDomainItf) CreateOvertime(ctx context.Context, data entity.CreateOvertimeData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOvertime", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOvertime indicates an expected call of CreateOvertime.
func (mr *MockDomainItfMockRecorder) CreateOvertime(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOvertime", reflect.TypeOf((*MockDomainItf)(nil).CreateOvertime), ctx, data)
}

// GetAttendance mocks base method.
func (m *MockDomainItf) GetAttendance(ctx context.Context, filter entity.GetAttendance) ([]entity.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendance", ctx, filter)
	ret0, _ := ret[0].([]entity.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendance indicates an expected call of GetAttendance.
func (mr *MockDomainItfMockRecorder) GetAttendance(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendance", reflect.TypeOf((*MockDomainItf)(nil).GetAttendance), ctx, filter)
}

// GetAttendancePeriods mocks base method.
func (m *MockDomainItf) GetAttendancePeriods(ctx context.Context, filter entity.GetAttendancePeriodFilter) ([]entity.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendancePeriods", ctx, filter)
	ret0, _ := ret[0].([]entity.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendancePeriods indicates an expected call of GetAttendancePeriods.
func (mr *MockDomainItfMockRecorder) GetAttendancePeriods(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendancePeriods", reflect.TypeOf((*MockDomainItf)(nil).GetAttendancePeriods), ctx, filter)
}

// GetOvertime mocks base method.
func (m *MockDomainItf) GetOvertime(ctx context.Context, filter entity.GetOvertimeFilter) ([]entity.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOvertime", ctx, filter)
	ret0, _ := ret[0].([]entity.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOvertime indicates an expected call of GetOvertime.
func (mr *MockDomainItfMockRecorder) GetOvertime(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOvertime", reflect.TypeOf((*MockDomainItf)(nil).GetOvertime), ctx, filter)
}

// UpdateAttendance mocks base method.
func (m *MockDomainItf) UpdateAttendance(ctx context.Context, data entity.UpdateAttendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttendance", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAttendance indicates an expected call of UpdateAttendance.
func (mr *MockDomainItfMockRecorder) UpdateAttendance(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttendance", reflect.TypeOf((*MockDomainItf)(nil).UpdateAttendance), ctx, data)
}

// UpdateAttendancePeriod mocks base method.
func (m *MockDomainItf) UpdateAttendancePeriod(ctx context.Context, data entity.UpdateAttendancePeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttendancePeriod", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAttendancePeriod indicates an expected call of UpdateAttendancePeriod.
func (mr *MockDomainItfMockRecorder) UpdateAttendancePeriod(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttendancePeriod", reflect.TypeOf((*MockDomainItf)(nil).UpdateAttendancePeriod), ctx, data)
}
