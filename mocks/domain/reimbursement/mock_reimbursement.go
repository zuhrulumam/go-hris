// Code generated by MockGen. DO NOT EDIT.
// Source: business/domain/reimbursement/reimbursement.go
//
// Generated by this command:
//
//	mockgen -source=business/domain/reimbursement/reimbursement.go -destination=mocks/domain/reimbursement/mock_reimbursement.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/zuhrulumam/go-hris/business/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainItf is a mock of DomainItf interface.
type MockDomainItf struct {
	ctrl     *gomock.Controller
	recorder *MockDomainItfMockRecorder
	isgomock struct{}
}

// MockDomainItfMockRecorder is the mock recorder for MockDomainItf.
type MockDomainItfMockRecorder struct {
	mock *MockDomainItf
}

// NewMockDomainItf creates a new mock instance.
func NewMockDomainItf(ctrl *gomock.Controller) *MockDomainItf {
	mock := &MockDomainItf{ctrl: ctrl}
	mock.recorder = &MockDomainItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainItf) EXPECT() *MockDomainItfMockRecorder {
	return m.recorder
}

// GetReimbursements mocks base method.
func (m *MockDomainItf) GetReimbursements(ctx context.Context, filter entity.GetReimbursementFilter) ([]entity.Reimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReimbursements", ctx, filter)
	ret0, _ := ret[0].([]entity.Reimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReimbursements indicates an expected call of GetReimbursements.
func (mr *MockDomainItfMockRecorder) GetReimbursements(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReimbursements", reflect.TypeOf((*MockDomainItf)(nil).GetReimbursements), ctx, filter)
}

// SubmitReimbursement mocks base method.
func (m *MockDomainItf) SubmitReimbursement(ctx context.Context, data entity.SubmitReimbursementData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReimbursement", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitReimbursement indicates an expected call of SubmitReimbursement.
func (mr *MockDomainItfMockRecorder) SubmitReimbursement(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReimbursement", reflect.TypeOf((*MockDomainItf)(nil).SubmitReimbursement), ctx, data)
}
