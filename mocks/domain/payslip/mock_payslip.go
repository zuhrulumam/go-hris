// Code generated by MockGen. DO NOT EDIT.
// Source: business/domain/payslip/payslip.go
//
// Generated by this command:
//
//	mockgen -source=business/domain/payslip/payslip.go -destination=mocks/domain/payslip/mock_payslip.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/zuhrulumam/go-hris/business/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainItf is a mock of DomainItf interface.
type MockDomainItf struct {
	ctrl     *gomock.Controller
	recorder *MockDomainItfMockRecorder
	isgomock struct{}
}

// MockDomainItfMockRecorder is the mock recorder for MockDomainItf.
type MockDomainItfMockRecorder struct {
	mock *MockDomainItf
}

// NewMockDomainItf creates a new mock instance.
func NewMockDomainItf(ctrl *gomock.Controller) *MockDomainItf {
	mock := &MockDomainItf{ctrl: ctrl}
	mock.recorder = &MockDomainItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainItf) EXPECT() *MockDomainItfMockRecorder {
	return m.recorder
}

// CreatePayrollJob mocks base method.
func (m *MockDomainItf) CreatePayrollJob(ctx context.Context, data entity.PayrollJob) (*entity.PayrollJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayrollJob", ctx, data)
	ret0, _ := ret[0].(*entity.PayrollJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayrollJob indicates an expected call of CreatePayrollJob.
func (mr *MockDomainItfMockRecorder) CreatePayrollJob(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayrollJob", reflect.TypeOf((*MockDomainItf)(nil).CreatePayrollJob), ctx, data)
}

// CreatePayslip mocks base method.
func (m *MockDomainItf) CreatePayslip(ctx context.Context, payslips []entity.Payslip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayslip", ctx, payslips)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayslip indicates an expected call of CreatePayslip.
func (mr *MockDomainItfMockRecorder) CreatePayslip(ctx, payslips any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayslip", reflect.TypeOf((*MockDomainItf)(nil).CreatePayslip), ctx, payslips)
}

// GetPayrollSummary mocks base method.
func (m *MockDomainItf) GetPayrollSummary(ctx context.Context, req entity.GetPayrollSummaryRequest) (*entity.GetPayrollSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayrollSummary", ctx, req)
	ret0, _ := ret[0].(*entity.GetPayrollSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayrollSummary indicates an expected call of GetPayrollSummary.
func (mr *MockDomainItfMockRecorder) GetPayrollSummary(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayrollSummary", reflect.TypeOf((*MockDomainItf)(nil).GetPayrollSummary), ctx, req)
}

// GetPayslip mocks base method.
func (m *MockDomainItf) GetPayslip(ctx context.Context, filter entity.GetPayslipRequest) ([]entity.Payslip, int64, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayslip", ctx, filter)
	ret0, _ := ret[0].([]entity.Payslip)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetPayslip indicates an expected call of GetPayslip.
func (mr *MockDomainItfMockRecorder) GetPayslip(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayslip", reflect.TypeOf((*MockDomainItf)(nil).GetPayslip), ctx, filter)
}

// IsPayrollExists mocks base method.
func (m *MockDomainItf) IsPayrollExists(ctx context.Context, periodID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPayrollExists", ctx, periodID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPayrollExists indicates an expected call of IsPayrollExists.
func (mr *MockDomainItfMockRecorder) IsPayrollExists(ctx, periodID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPayrollExists", reflect.TypeOf((*MockDomainItf)(nil).IsPayrollExists), ctx, periodID)
}

// UpdatePayslipJob mocks base method.
func (m *MockDomainItf) UpdatePayslipJob(ctx context.Context, data entity.UpdatePayslipJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayslipJob", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayslipJob indicates an expected call of UpdatePayslipJob.
func (mr *MockDomainItfMockRecorder) UpdatePayslipJob(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayslipJob", reflect.TypeOf((*MockDomainItf)(nil).UpdatePayslipJob), ctx, data)
}
